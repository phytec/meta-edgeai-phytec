From 0313bf608b3cc068f31fccd37e791ca9537e785e Mon Sep 17 00:00:00 2001
From: Beleswar Padhi <b-padhi@ti.com>
Date: Mon, 17 Feb 2025 13:15:00 +0530
Subject: [PATCH 1/2] HACK: remoteproc: k3-r5: Release processor control for
 device operations

Device Operations like get_device, and put_device are processed by
Device Manager. This requires Device Manager to acquire processor
control to execute the operations. Therefore, release processor
control when executing device operations and acquire it back after
the operations are over.

Signed-off-by: Beleswar Padhi <b-padhi@ti.com>
---
 drivers/remoteproc/ti_k3_r5_remoteproc.c | 28 ++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/drivers/remoteproc/ti_k3_r5_remoteproc.c b/drivers/remoteproc/ti_k3_r5_remoteproc.c
index 4ec76029b341..94929f6ae08f 100644
--- a/drivers/remoteproc/ti_k3_r5_remoteproc.c
+++ b/drivers/remoteproc/ti_k3_r5_remoteproc.c
@@ -268,6 +268,12 @@ static int k3_r5_split_reset(struct k3_r5_core *core)
 {
 	int ret;
 
+	ret = ti_sci_proc_release(core->tsp);
+	if (ret) {
+		dev_err(core->dev, "failed to release proc, ret = %d\n", ret);
+		return ret;
+	}
+
 	ret = reset_control_assert(core->reset);
 	if (ret) {
 		dev_err(core->dev, "local-reset assert failed, ret = %d\n",
@@ -282,8 +288,13 @@ static int k3_r5_split_reset(struct k3_r5_core *core)
 			ret);
 		if (reset_control_deassert(core->reset))
 			dev_warn(core->dev, "local-reset deassert back failed\n");
+		return ret;
 	}
 
+	ret = ti_sci_proc_request(core->tsp);
+	if (ret)
+		dev_err(core->dev, "ti_sci_proc_request failed, ret = %d\n", ret);
+
 	return ret;
 }
 
@@ -291,6 +302,12 @@ static int k3_r5_split_release(struct k3_r5_core *core)
 {
 	int ret;
 
+	ret = ti_sci_proc_release(core->tsp);
+	if (ret) {
+		dev_err(core->dev, "failed to release proc, ret = %d\n", ret);
+		return ret;
+	}
+
 	ret = core->ti_sci->ops.dev_ops.get_device(core->ti_sci,
 						   core->ti_sci_id);
 	if (ret) {
@@ -306,8 +323,13 @@ static int k3_r5_split_release(struct k3_r5_core *core)
 		if (core->ti_sci->ops.dev_ops.put_device(core->ti_sci,
 							 core->ti_sci_id))
 			dev_warn(core->dev, "module-reset assert back failed\n");
+		return ret;
 	}
 
+	ret = ti_sci_proc_request(core->tsp);
+	if (ret)
+		dev_err(core->dev, "ti_sci_proc_request failed, ret = %d\n", ret);
+
 	return ret;
 }
 
@@ -1206,6 +1228,12 @@ static int k3_r5_rproc_configure_mode(struct k3_r5_rproc *kproc)
 		return reset_ctrl_status;
 	}
 
+	/*
+	 * Skip the waiting mechanism for sequential power-on of cores if the
+	 * core has already been booted by another entity.
+	 */
+	core->released_from_reset = c_state;
+
 	ret = ti_sci_proc_get_status(core->tsp, &boot_vec, &cfg, &ctrl,
 				     &stat);
 	if (ret < 0) {
-- 
2.34.1

