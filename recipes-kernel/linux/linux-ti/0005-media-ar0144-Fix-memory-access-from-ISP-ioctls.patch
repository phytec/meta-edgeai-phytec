From 0906df5e5d392fa630a3511d6f224ce1cffa9d30 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20Riedm=C3=BCller?= <s.riedmueller@phytec.de>
Date: Fri, 20 Oct 2023 12:04:30 +0200
Subject: [PATCH 05/12] media: ar0144: Fix memory access from ISP ioctls
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Since the ISP specific ioctl are not V4L2 conform we need to make sure
to access userspace memory with copy_from_user and copy_to_user
manually.

Signed-off-by: Stefan Riedm√ºller <s.riedmueller@phytec.de>
Signed-off-by: Christian Hemp <c.hemp@phytec.de>
---
 drivers/media/i2c/ar0144.c | 98 ++++++++++++++++++++++++++------------
 1 file changed, 68 insertions(+), 30 deletions(-)

diff --git a/drivers/media/i2c/ar0144.c b/drivers/media/i2c/ar0144.c
index c12e3db2dc85..17c973cf74b0 100644
--- a/drivers/media/i2c/ar0144.c
+++ b/drivers/media/i2c/ar0144.c
@@ -723,24 +723,31 @@ static int ar0144_vv_querymode(struct ar0144 *sensor, void *args)
 	struct vvcam_mode_info_s *modes;
 	struct vvcam_mode_info_array_s *array =
 		(struct vvcam_mode_info_array_s *) args;
-	int copy_ret;
+	uint32_t count;
+	int ret;
 
 	dev_dbg(dev, "%s\n", __func__);
 
 	switch (sensor->model->chip) {
 	case AR0144:
 		modes = ar0144_modes;
-		array->count = ARRAY_SIZE(ar0144_modes);
+		count = ARRAY_SIZE(ar0144_modes);
 		break;
 	case AR0234:
 		modes = ar0234_modes;
-		array->count = ARRAY_SIZE(ar0234_modes);
+		count = ARRAY_SIZE(ar0234_modes);
 		break;
 	}
 
-	copy_ret = copy_to_user(&array->modes, modes,
-				sizeof(*modes) * array->count);
-	return copy_ret;
+	ret = copy_to_user(&array->count, &count, sizeof(count));
+	if (ret)
+		return -EIO;
+
+	ret = copy_to_user(&array->modes, modes, sizeof(*modes) * count);
+	if (ret)
+		ret = -EIO;
+
+	return ret;
 }
 
 static int ar0144_vv_get_sensormode(struct ar0144 *sensor, void *args)
@@ -786,14 +793,14 @@ static int ar0144_vv_get_sensormode(struct ar0144 *sensor, void *args)
 
 	ae_info->start_exposure = (gain * exposure_ms / 1000) * 1024;
 
-	mutex_unlock(&sensor->lock);
-
 	ret = copy_to_user(args, &sensor->vvcam_mode,
 			   sizeof(struct vvcam_mode_info_s));
 	if (ret)
-		return -EIO;
+		ret = -EIO;
 
-	return 0;
+	mutex_unlock(&sensor->lock);
+
+	return ret;
 }
 
 static int ar0144_vv_set_sensormode(struct ar0144 *sensor, void *args)
@@ -871,7 +878,12 @@ static int ar0144_vv_set_sensormode(struct ar0144 *sensor, void *args)
 
 static int ar0144_vv_s_stream(struct ar0144 *sensor, void *args)
 {
-	unsigned int enable = *(int *)args;
+	unsigned int enable = 0;
+	int ret;
+
+	ret = copy_from_user(&enable, args, sizeof(enable));
+	if (ret)
+		return -EIO;
 
 	return ar0144_s_stream(&sensor->subdev, enable);
 }
@@ -880,9 +892,14 @@ static int ar0144_vv_set_exposure(struct ar0144 *sensor, void *args)
 {
 	struct device *dev = sensor->subdev.dev;
 	unsigned int pixclk_mhz;
-	uint32_t new_exp = *(uint32_t *) args;
+	uint32_t new_exp = 0;
 	uint32_t int_time;
 	int index;
+	int ret;
+
+	ret = copy_from_user(&new_exp, args, sizeof(new_exp));
+	if (ret)
+		return -EIO;
 
 	mutex_lock(&sensor->lock);
 
@@ -904,8 +921,13 @@ static int ar0144_vv_set_exposure(struct ar0144 *sensor, void *args)
 static int ar0144_vv_set_gain(struct ar0144 *sensor, void *args)
 {
 	struct device *dev = sensor->subdev.dev;
-	uint32_t new_gain = *(uint32_t *) args;
+	uint32_t new_gain = 0;
 	uint32_t d_gain, a_gain;
+	int ret;
+
+	ret = copy_from_user(&new_gain, args, sizeof(new_gain));
+	if (ret)
+		return -EIO;
 
 	new_gain = new_gain * 1000 / 1024;
 
@@ -927,28 +949,33 @@ static int ar0144_vv_set_gain(struct ar0144 *sensor, void *args)
 static int ar0144_vv_set_wb(struct ar0144 *sensor, void *args)
 {
 	struct device *dev = sensor->subdev.dev;
-	sensor_white_balance_t *wb = (sensor_white_balance_t *) args;
+	sensor_white_balance_t wb;
 	s32 new_gain;
+	int ret;
+
+	ret = copy_from_user(&wb, args, sizeof(wb));
+	if (ret)
+		return -EIO;
 
-	new_gain = (wb->r_gain >> 8) * 1000 +
-		   (wb->r_gain & 0xff) * 1000 / 256;
+	new_gain = (wb.r_gain >> 8) * 1000 +
+		   (wb.r_gain & 0xff) * 1000 / 256;
 	v4l2_ctrl_s_ctrl(sensor->gains.red_ctrl, new_gain);
-	dev_dbg(dev, "r_gain: %u --> %u\n", wb->r_gain, new_gain);
+	dev_dbg(dev, "r_gain: %u --> %u\n", wb.r_gain, new_gain);
 
-	new_gain = (wb->gr_gain >> 8) * 1000 +
-		   (wb->gr_gain & 0xff) * 1000 / 256;
+	new_gain = (wb.gr_gain >> 8) * 1000 +
+		   (wb.gr_gain & 0xff) * 1000 / 256;
 	v4l2_ctrl_s_ctrl(sensor->gains.greenr_ctrl, new_gain);
-	dev_dbg(dev, "gr_gain: %u --> %u\n", wb->gr_gain, new_gain);
+	dev_dbg(dev, "gr_gain: %u --> %u\n", wb.gr_gain, new_gain);
 
-	new_gain = (wb->gb_gain >> 8) * 1000 +
-		   (wb->gb_gain & 0xff) * 1000 / 256;
+	new_gain = (wb.gb_gain >> 8) * 1000 +
+		   (wb.gb_gain & 0xff) * 1000 / 256;
 	v4l2_ctrl_s_ctrl(sensor->gains.greenb_ctrl, new_gain);
-	dev_dbg(dev, "gb_gain: %u --> %u\n", wb->gb_gain, new_gain);
+	dev_dbg(dev, "gb_gain: %u --> %u\n", wb.gb_gain, new_gain);
 
-	new_gain = (wb->b_gain >> 8) * 1000 +
-		   (wb->b_gain & 0xff) * 1000 / 256;
+	new_gain = (wb.b_gain >> 8) * 1000 +
+		   (wb.b_gain & 0xff) * 1000 / 256;
 	v4l2_ctrl_s_ctrl(sensor->gains.blue_ctrl, new_gain);
-	dev_dbg(dev, "b_gain: %u --> %u\n", wb->b_gain, new_gain);
+	dev_dbg(dev, "b_gain: %u --> %u\n", wb.b_gain, new_gain);
 
 	return 0;
 }
@@ -956,10 +983,11 @@ static int ar0144_vv_set_wb(struct ar0144 *sensor, void *args)
 static int ar0144_vv_get_fps(struct ar0144 *sensor, void *args)
 {
 	struct device *dev = sensor->subdev.dev;
-	uint32_t *out_fps = (uint32_t *) args;
+	uint32_t out_fps;
 	unsigned long pix_freq;
 	unsigned int fps;
 	int index;
+	int ret;
 
 	mutex_lock(&sensor->lock);
 
@@ -968,24 +996,34 @@ static int ar0144_vv_get_fps(struct ar0144 *sensor, void *args)
 
 	fps = div_u64(pix_freq * 10ULL, sensor->vlen * sensor->hlen);
 
-	*out_fps = fps * 1024 / 10;
+	out_fps = fps * 1024 / 10;
 
 	mutex_unlock(&sensor->lock);
 
 	dev_dbg(dev, "%s: %u.%u\n", __func__, fps/10, fps%10);
 
-	return 0;
+	ret = copy_to_user(args, &out_fps, sizeof(out_fps));
+	if (ret)
+		ret = -EIO;
+
+	return
+		ret;
 }
 
 static int ar0144_vv_set_fps(struct ar0144 *sensor, void *args)
 {
 	struct device *dev = sensor->subdev.dev;
 	const struct ar0144_sensor_limits *limits = sensor->model->data->limits;
-	uint32_t fps = *(uint32_t *) args;
+	uint32_t fps = 0;
 	unsigned long pix_freq;
 	unsigned int max_fps, min_fps;
 	unsigned int vlen, vblank;
 	int index;
+	int ret;
+
+	ret = copy_from_user(&fps, args, sizeof(fps));
+	if (ret)
+		return -EIO;
 
 	mutex_lock(&sensor->lock);
 
-- 
2.25.1

